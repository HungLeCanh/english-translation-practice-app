'use client';
import React, { useState } from 'react';
import { CheckCircle, XCircle, BookOpen, Award, RefreshCw } from 'lucide-react';

const levels = [
  { level: 'A1', text: 'Xin ch√†o' },
  { level: 'A2', text: 'T√¥i th√≠ch h·ªçc ti·∫øng Anh' },
  { level: 'B1', text: 'H√¥m nay tr·ªùi ƒë·∫πp, ch√∫ng ta n√™n ƒëi d·∫°o' },
  { level: 'B2', text: 'T√¥i nghƒ© r·∫±ng vi·ªác h·ªçc ngo·∫°i ng·ªØ r·∫•t quan tr·ªçng trong th·ªùi ƒë·∫°i to√†n c·∫ßu h√≥a' },
  { level: 'C1', text: 'Trong th·∫ø gi·ªõi hi·ªán ƒë·∫°i, vi·ªác giao ti·∫øp hi·ªáu qu·∫£ b·∫±ng nhi·ªÅu ng√¥n ng·ªØ l√† m·ªôt k·ªπ nƒÉng qu√Ω gi√°' },
  { level: 'C2', text: 'S·ª± hi·ªÉu bi·∫øt s√¢u s·∫Øc v·ªÅ vƒÉn h√≥a v√† ng√¥n ng·ªØ kh√°c nhau gi√∫p ch√∫ng ta tr·ªü th√†nh c√¥ng d√¢n to√†n c·∫ßu t·ªët h∆°n' }
];

const  topics = [ "T·∫•t c·∫£", "Gia ƒë√¨nh", "B·∫°n b√®", "C√¥ng vi·ªác", "H·ªçc t·∫≠p", "S·ªü th√≠ch", "Du l·ªãch", "Th·ªÉ thao", "VƒÉn h√≥a", "·∫®m th·ª±c", "C√¥ng ngh·ªá", "Gi√°o d·ª•c", "S·ª©c kh·ªèe", "M√¥i tr∆∞·ªùng", "Khoa h·ªçc", "L·ªãch s·ª≠", "Ngh·ªá thu·∫≠t", "√Çm nh·∫°c", "Phim ·∫£nh", "Th·ªùi trang", "X√£ h·ªôi"];

export default function TranslationApp() {
  const [currentVietnamese, setCurrentVietnamese] = useState('Xin ch√†o');
  const [userInput, setUserInput] = useState('');
  interface Feedback {
    isCorrect: boolean;
    correction: string;
    explanation?: string;
    score: number;
    newText?: string;
  }

  const [feedback, setFeedback] = useState<Feedback | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [showHint, setShowHint] = useState(false);
  const [currentLevel, setCurrentLevel] = useState('A1');
  const [currentTopic, setCurrentTopic] = useState('T·∫•t c·∫£');

  const handleSubmit = async () => {
    if (!userInput.trim()) return;
    
    setIsLoading(true);
    
    try {
      const response = await fetch('/api/correct', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          vieText: currentVietnamese,
          inputText: userInput.trim(),
          level: currentLevel,
          topic: currentTopic
        })
      });

      const result = await response.json();
      console.log('API Response:', result);
      setFeedback(result);
      
      // N·∫øu b·∫£n d·ªãch ƒë√∫ng, c·∫≠p nh·∫≠t c√¢u m·ªõi
      if (result.isCorrect && result.newText) {
        setTimeout(() => {
          setCurrentVietnamese(result.newText);
          setUserInput('');
          setFeedback(null);
          setShowHint(false);
        }, 10000); // Hi·ªÉn th·ªã k·∫øt qu·∫£ 10 gi√¢y tr∆∞·ªõc khi chuy·ªÉn c√¢u m·ªõi
      }
      
    } catch (error) {
      console.error('Error:', error);
      setFeedback({
        isCorrect: false,
        correction: 'C√≥ l·ªói khi k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.',
        explanation: 'L·ªói k·∫øt n·ªëi m·∫°ng.',
        score: 0
      });
    }
    
    setIsLoading(false);
  };

  // ch·ªçn ƒë·ªô kh√≥
  const handleLevelChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedLevel = e.target.value;
    setCurrentLevel(selectedLevel);
    const selectedSentence = levels.find(level => level.level === selectedLevel)?.text || 'Xin ch√†o';
    setCurrentVietnamese(selectedSentence);
    setUserInput('');
    setFeedback(null);
    setShowHint(false);
  }
  // ch·ªçn ch·ªß ƒë·ªÅ
  const handleTopicChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedTopic = e.target.value;
    setCurrentTopic(selectedTopic);
  }

  const resetSentence = () => {
    setCurrentVietnamese('Xin ch√†o');
    setUserInput('');
    setFeedback(null);
    setShowHint(false);
  };

  const getScoreColor = (score: number) => {
    if (score >= 8) return 'text-green-600';
    if (score >= 6) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBackground = (score: number) => {
    if (score >= 8) return 'bg-green-100';
    if (score >= 6) return 'bg-yellow-100';
    return 'bg-red-100';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">
            üáªüá≥ ‚Üí üá∫üá∏ Luy·ªán d·ªãch c√πng AI
          </h1>
          <p className="text-gray-600">
            C·∫£i thi·ªán k·ªπ nƒÉng d·ªãch ti·∫øng Anh v·ªõi s·ª± h·ªó tr·ª£ c·ªßa AI th√¥ng minh
          </p>
        </div>

        {/* Main Content */}
        <div className="bg-white rounded-2xl shadow-xl p-8 mb-6">
          {/* Reset Button */}
          <div className="flex justify-end gap-2 mb-6">
            {/* Hi·ªÉn th·ªã label nh·ªè ƒë·ªÉ ch·ªçn ƒë·ªô kh√≥ v√† combobox */}
            <div className="flex items-center justify-center gap-2">
              <label className="text-sm text-gray-600 mr-2">Ch·ªçn ƒë·ªô kh√≥:</label>
              <select
                value={currentLevel}
                onChange={handleLevelChange}
                className="border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                {levels.map((level) => (
                  <option key={level.level} value={level.level}>
                    {level.level}
                  </option>
                ))}
              </select>
            </div>
            {/* Hi·ªÉn th·ªã label nh·ªè ƒë·ªÉ ch·ªçn ch·ªß ƒë·ªÅ v√† combobox */}
            <div className="flex items-center justify-center gap-2">
              <label className="text-sm text-gray-600 mr-2">Ch·ªçn ch·ªß ƒë·ªÅ:</label>
              <select
                value={currentTopic}
                onChange={handleTopicChange}
                className="border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                {topics.map((topic) => (
                  <option key={topic} value={topic}>
                    {topic}
                  </option>
                ))}
              </select>
            </div>

            {/* Reset button */}
            <button
              onClick={resetSentence}
              className="group flex items-center gap-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
            >
              <RefreshCw size={16} id="refreshIcon" className="group-hover:animate-spin" />
              B·∫Øt ƒë·∫ßu l·∫°i
            </button>
          </div>

          {/* Vietnamese Sentence */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üìù D·ªãch c√¢u sau sang ti·∫øng Anh:
            </label>
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <p className="text-lg font-medium text-blue-900">
                &quot;{currentVietnamese}&quot;
              </p>
            </div>
          </div>

          {/* Translation Input */}
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ‚úçÔ∏è B·∫£n d·ªãch c·ªßa b·∫°n:
              </label>
              <textarea
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                className="w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                rows={3}
                placeholder="Nh·∫≠p b·∫£n d·ªãch ti·∫øng Anh t·∫°i ƒë√¢y..."
                disabled={isLoading}
              />
            </div>

            <div className="flex gap-3">
              <button
                onClick={handleSubmit}
                disabled={!userInput.trim() || isLoading}
                className="flex-1 bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors font-medium"
              >
                {isLoading ? (
                  <span className="flex items-center justify-center gap-2">
                    <RefreshCw className="animate-spin" size={16} />
                    ƒêang ki·ªÉm tra...
                  </span>
                ) : (
                  'üîç Ki·ªÉm tra b·∫£n d·ªãch'
                )}
              </button>
              
              <button
                onClick={() => setShowHint(!showHint)}
                className="px-4 py-3 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
              >
                üí° G·ª£i √Ω
              </button>
            </div>
          </div>

          {/* Hint */}
          {showHint && (
            <div className="mt-4 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <p className="text-sm text-yellow-800">
                <strong>üí° G·ª£i √Ω:</strong> Ch√∫ √Ω ƒë·∫øn th√¨ c·ªßa ƒë·ªông t·ª´ v√† ch·ªß ng·ªØ trong c√¢u. H√£y d·ªãch t·ª´ng t·ª´ m·ªôt c√°ch c·∫©n th·∫≠n.
              </p>
            </div>
          )}
        </div>

        {/* Feedback */}
        {feedback && (
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <div className="space-y-6">
              {/* Score */}
              <div className={`${getScoreBackground(feedback.score)} rounded-xl p-6 text-center`}>
                <div className="flex items-center justify-center gap-3 mb-2">
                  <Award className={getScoreColor(feedback.score)} size={32} />
                  <span className={`text-3xl font-bold ${getScoreColor(feedback.score)}`}>
                    {feedback.score}/10
                  </span>
                </div>
                <p className="text-gray-600">
                  {feedback.score >= 8 ? 'Xu·∫•t s·∫Øc!' : 
                   feedback.score >= 6 ? 'T·ªët, c·∫ßn c·∫£i thi·ªán!' : 
                   'C·∫ßn luy·ªán t·∫≠p th√™m!'}
                </p>
                {feedback.isCorrect && feedback.newText && (
                  <p className="text-green-600 font-medium mt-2">
                    üéâ Chuy·ªÉn sang c√¢u m·ªõi trong 10 gi√¢y...
                  </p>
                )}
              </div>

              {/* Correction */}
              <div className="space-y-4">
                <div className="flex items-start gap-3">
                  {feedback.isCorrect ? (
                    <CheckCircle className="text-green-500 mt-1" size={20} />
                  ) : (
                    <XCircle className="text-red-500 mt-1" size={20} />
                  )}
                  <div>
                    <h3 className="font-semibold text-gray-800 mb-2">
                      {feedback.isCorrect ? '‚úÖ B·∫£n d·ªãch ch√≠nh x√°c!' : 'üìù B·∫£n d·ªãch chu·∫©n:'}
                    </h3>
                    <div className="relative">
                      <p className="text-lg bg-green-50 border border-green-200 rounded-lg p-3 pe-40 font-medium text-green-900 pr-16 relative">
                        &quot;{feedback.correction}&quot;
                        <button
                          type="button"
                          className="absolute top-1 right-1 opacity-70 hover:opacity-100 bg-white border border-gray-200 rounded px-2 py-1 text-xs text-gray-700 hover:bg-gray-100 transition"
                          onClick={() => {
                            navigator.clipboard.writeText(feedback.correction);
                          }}
                          title="Copy to clipboard"
                        >
                          üìã Copy
                        </button>
                      </p>
                    </div>
                  </div>
                </div>

                {/* Detailed Feedback */}
                {feedback.explanation && (
                  <div className="flex items-start gap-3">
                    <BookOpen className="text-blue-500 mt-1" size={20} />
                    <div>
                      <h3 className="font-semibold text-gray-800 mb-2">üìö Gi·∫£i th√≠ch chi ti·∫øt:</h3>
                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 text-blue-900 space-y-2">
                        {feedback.explanation
                          .split(/\*\s+/) // T√°ch t·ª´ng m·ª•c b·∫Øt ƒë·∫ßu b·∫±ng *
                          .filter((line: string) => line.trim() !== "") // B·ªè d√≤ng r·ªóng
                          .map((line: string, idx: React.Key | null | undefined) => {
                            const parts = line.split(/(\*\*[^\*]+\*\*)/g); // T√°ch ph·∫ßn in ƒë·∫≠m

                            return (
                              <p key={idx}>
                                *{" "}
                                {parts.map((part, i) => {
                                  if (/^\*\*[^\*]+\*\*$/.test(part)) {
                                    return (
                                      <strong key={i} className="font-semibold">
                                        {part.slice(2, -2)}
                                      </strong>
                                    );
                                  } else {
                                    return <span key={i}>{part}</span>;
                                  }
                                })}
                              </p>
                            );
                          })}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Footer */}
        <div className="text-center mt-8 text-gray-500 text-sm">
          <p>ü§ñ ƒê∆∞·ª£c h·ªó tr·ª£ b·ªüi AI ‚Ä¢ Ph√°t tri·ªÉn b·ªüi L√™ C·∫£nh H√πng ‚Ä¢ Luy·ªán t·∫≠p ƒë·ªÅu ƒë·∫∑n ƒë·ªÉ ti·∫øn b·ªô nhanh ch√≥ng!</p>
        </div>
      </div>
    </div>
  );
}